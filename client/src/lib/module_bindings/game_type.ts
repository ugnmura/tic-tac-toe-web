// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { FieldState as __FieldState } from "./field_state_type";
import { GameResult as __GameResult } from "./game_result_type";

export type Game = {
  id: string;
  field: (__FieldState | undefined)[];
  currentTurn: __FieldState;
  playerX: Identity | undefined;
  playerO: Identity | undefined;
  result: __GameResult | undefined;
  xScore: number;
  oScore: number;
  tieScore: number;
};

/**
 * A namespace for generated helper functions.
 */
export namespace Game {
  /**
   * A function which returns this type represented as an AlgebraicType.
   * This function is derived from the AlgebraicType used to generate this type.
   */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createStringType()),
      new ProductTypeElement(
        "field",
        AlgebraicType.createArrayType(
          AlgebraicType.createOptionType(
            __FieldState.getTypeScriptAlgebraicType(),
          ),
        ),
      ),
      new ProductTypeElement(
        "currentTurn",
        __FieldState.getTypeScriptAlgebraicType(),
      ),
      new ProductTypeElement(
        "playerX",
        AlgebraicType.createOptionType(AlgebraicType.createIdentityType()),
      ),
      new ProductTypeElement(
        "playerO",
        AlgebraicType.createOptionType(AlgebraicType.createIdentityType()),
      ),
      new ProductTypeElement(
        "result",
        AlgebraicType.createOptionType(
          __GameResult.getTypeScriptAlgebraicType(),
        ),
      ),
      new ProductTypeElement("xScore", AlgebraicType.createU32Type()),
      new ProductTypeElement("oScore", AlgebraicType.createU32Type()),
      new ProductTypeElement("tieScore", AlgebraicType.createU32Type()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Game): void {
    Game.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Game {
    return Game.getTypeScriptAlgebraicType().deserialize(reader);
  }
}
