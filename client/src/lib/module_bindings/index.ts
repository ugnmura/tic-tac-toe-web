// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CreateGame } from "./create_game_reducer.ts";
export { CreateGame };
import { JoinGame } from "./join_game_reducer.ts";
export { JoinGame };
import { MakeMove } from "./make_move_reducer.ts";
export { MakeMove };
import { ResetGame } from "./reset_game_reducer.ts";
export { ResetGame };

// Import and reexport all table handle types
import { GameTableHandle } from "./game_table.ts";
export { GameTableHandle };

// Import and reexport all types
import { FieldState } from "./field_state_type.ts";
export { FieldState };
import { Game } from "./game_type.ts";
export { Game };
import { GameResult } from "./game_result_type.ts";
export { GameResult };

const REMOTE_MODULE = {
  tables: {
    game: {
      tableName: "game",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    create_game: {
      reducerName: "create_game",
      argsType: CreateGame.getTypeScriptAlgebraicType(),
    },
    join_game: {
      reducerName: "join_game",
      argsType: JoinGame.getTypeScriptAlgebraicType(),
    },
    make_move: {
      reducerName: "make_move",
      argsType: MakeMove.getTypeScriptAlgebraicType(),
    },
    reset_game: {
      reducerName: "reset_game",
      argsType: ResetGame.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreateGame", args: CreateGame }
| { name: "JoinGame", args: JoinGame }
| { name: "MakeMove", args: MakeMove }
| { name: "ResetGame", args: ResetGame }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createGame(id: string) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    CreateGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_game", __argsBuffer, this.setCallReducerFlags.createGameFlags);
  }

  onCreateGame(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("create_game", callback);
  }

  removeOnCreateGame(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("create_game", callback);
  }

  joinGame(id: string) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    JoinGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_game", __argsBuffer, this.setCallReducerFlags.joinGameFlags);
  }

  onJoinGame(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("join_game", callback);
  }

  removeOnJoinGame(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("join_game", callback);
  }

  makeMove(id: string, index: number) {
    const __args = { id, index };
    let __writer = new BinaryWriter(1024);
    MakeMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("make_move", __argsBuffer, this.setCallReducerFlags.makeMoveFlags);
  }

  onMakeMove(callback: (ctx: ReducerEventContext, id: string, index: number) => void) {
    this.connection.onReducer("make_move", callback);
  }

  removeOnMakeMove(callback: (ctx: ReducerEventContext, id: string, index: number) => void) {
    this.connection.offReducer("make_move", callback);
  }

  resetGame(id: string) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    ResetGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("reset_game", __argsBuffer, this.setCallReducerFlags.resetGameFlags);
  }

  onResetGame(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("reset_game", callback);
  }

  removeOnResetGame(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("reset_game", callback);
  }

}

export class SetReducerFlags {
  createGameFlags: CallReducerFlags = 'FullUpdate';
  createGame(flags: CallReducerFlags) {
    this.createGameFlags = flags;
  }

  joinGameFlags: CallReducerFlags = 'FullUpdate';
  joinGame(flags: CallReducerFlags) {
    this.joinGameFlags = flags;
  }

  makeMoveFlags: CallReducerFlags = 'FullUpdate';
  makeMove(flags: CallReducerFlags) {
    this.makeMoveFlags = flags;
  }

  resetGameFlags: CallReducerFlags = 'FullUpdate';
  resetGame(flags: CallReducerFlags) {
    this.resetGameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get game(): GameTableHandle {
    return new GameTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.game));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
